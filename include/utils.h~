#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <strings.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>
#include <stdarg.h>

#ifndef _UTILS_H_
#define _UTILS_H_

#define LISTENQ 1024
#define MAXLINE 4096

#define SA struct sockaddr
void err_sys(const char *fmt);
void err_quit(const char *fmt, ...);

static void
Close(int fd_to_close)
{
  if(close(fd_to_close) == -1)
    err_sys("close error");
}

static int
Accept(int fd, struct sockaddr *sa, socklen_t *salenptr)
{
  int n;
 again:
  if( (n = accept(fd, sa, salenptr)) < 0) {
    if(errno == ECONNABORTED)
      goto again;
    else
      err_sys("accept error");
  }
  return(n);
}


static void
Bind(int fd, const struct sockaddr *sa, socklen_t salen)
{
  if(bind(fd, sa, salen) < 0)
    err_sys("bind error");
}

static void
Listen(int fd, int backlog)
{
  char *ptr;

  if( (ptr = getenv("LISTENQ")) != NULL)
    backlog = atoi(ptr);
  if(listen(fd, backlog) < 0)
    err_sys("listen error");
}

static void
Write(int fd, void *buff, size_t nbytes)
{
  if(write(fd, buff, nbytes) != nbytes)
    err_sys("write error");
}


static int
Socket(int family, int type, int protocol)
{
  int n;
  if( (n = socket(family, type, protocol)) < 0)
    err_sys("socket error");
  return(n);
}

static ssize_t
Read(int fd, void *ptr, size_t nbytes)
{
  ssize_t n;

  if( (n = read(fd, ptr, nbytes)) == -1)
    err_sys("read error");
  return(n);
}


static void
Connect(int fd, const struct sockaddr *sa, socklen_t salen)
{
  if(connect(fd, sa, salen) < 0)
    err_sys("connect error");
}

#endif
